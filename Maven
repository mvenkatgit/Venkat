There are few build tools

ANT
Maven
Gradle

For . net
########
 Nant
MSBuild

Ruby
########
Rake


javascript/NodeJS/AngularJS
#############################
Gulp/grunt


maven is developed by apache maven

build : procees of automate the creating the packages 


based on project type we are going to generate the packages like ear war jar

javac helloworld.java c means compile
after compile it will generate like helloworld.class


helloworld.java --> source code it can be understand

helloworld.class --> byte code this is generated by java compiler it can't be read and understand
java helloworld



A . Standalone Applications (.jar -->java archive)
(it contains only java class)
ex : helloworld.java
standalone application examples:
java classes
  

B . Web Applications        (.war --> Web archive)
(java classes + webcontent (html/css/javascript/images/xml))


C . Enterprise Applications (.ear --> Enterprise archive)

java code + webcontent
one mandatory .war file is required for .ear file
and also it contents .jar .war files


.ear is big packages

#####################################################

maven directory structure
#########################
boot :
    maven commands 
 
bin  : 
  mvn  : binary files are there
lib  :
   it contents libraries
   jar files
conf : configuration files
   settings.xml files


jdk 1.8 java development kit
jre java runtime environment


java development maven 3.3+ require JDK 1.7 or above


export M2_HOME=/opt/apache-maven-3.9.0
export PATH=$PATH:$M2_HOME/bin


default names 
below are the build files


HTML (hypetric mark up langue)


<> (it's for html)

xml --> extensible mark up language


<openingtag>

</closingtag>

ANT --> build.xml
Maven --> pom.xml
Gradle --> build.gradle

we can customize the name as well



groupid >com.mss<

artificat id >projectname<
version>1.0< (version of it)
packaging >jar<



dependencies will download fro many one of the repository below

maven local repo (it's like a folder in our laptop) (it will create a folder and keep it in repo) cd ~/.M2/repo)

 --> we can give custome directory 

maven central repo
remote repo

for sameple project

mvn archetype:generat




groupid 

In Maven, groupId is a unique identifier for a project's group or organization. It is often used in combination with artifactId and version to identify a specific project and its corresponding artifacts (such as JARs, WARs, etc.).

The groupId should follow a reverse domain name convention, where the elements of the domain name are reversed and separated by dots. For example, if the organization's domain name is example.com, the groupId would typically be defined as com.example. This helps ensure that the groupId is globally unique and avoids naming conflicts with other organizations.

The groupId is typically defined in the Maven project's pom.xml file, which is the project's configuration file. It is one of the required fields in the pom.xml file, along with artifactId and version.



what is jar,war and ear
##########################

jar stands for Java Archive, and it is used to package Java classes and resources into a single archive file. JAR files are used for packaging libraries and standalone applications that can be executed using the java command.

war stands for Web Archive, and it is used to package Java web applications that can be deployed to a web server. WAR files contain Java classes, JSPs, HTML, CSS, JavaScript, and other resources required by a web application.

ear stands for Enterprise Archive, and it is used to package Java enterprise applications that can be deployed to an application server. EAR files contain multiple Java modules, such as EJBs, web applications, and resource adapters.




what are the repository types in maven 
########################################



In Maven, there are two main types of repositories: local repositories and remote repositories.

Local repository:
The local repository is a cache of all the artifacts (such as JAR, WAR, and EAR files) that Maven has downloaded from remote repositories. When you build a Maven project, Maven first looks for the required artifacts in the local repository. If an artifact is not found in the local repository, Maven will download it from a remote repository and store it in the local repository for future use. The local repository is located in the .m2 directory in your home directory, and it can be configured in the Maven settings.xml file.

Remote repository:
A remote repository is a repository that is not located on your local machine. Remote repositories can be used to share and distribute artifacts across different development teams and organizations. Maven supports several types of remote repositories, including:

Maven Central: This is the default remote repository that Maven uses to download artifacts. It contains a large number of open-source artifacts that can be used in Maven projects.

Private remote repository: This is a remote repository that is set up by a development team or organization to share and distribute internal artifacts. Private remote repositories can be hosted on a web server or a repository manager tool such as Nexus, Artifactory, or Archiva.

Proxy remote repository: This is a remote repository that is set up to cache artifacts from other remote repositories. Proxy repositories can help reduce the network traffic and download time when building Maven projects.

Remote repositories are specified in the Maven settings.xml file or in the project's pom.xml file. Maven will automatically download the required artifacts from remote repositories when you build your project using mvn package or other Maven commands.































in pom.xml required dependencies will be configured
#####################

<localRepository>Users/mithun/custome_maven_repo/<localRepository> this is the path where we can mention local repostiroy instead of .m2 this property will be avaiable in settings.xml


jar files will be developed by developers will keep them in nexys

#############################################################################



maven life cycles			goals

 
clean					clean --> (clean up the previous build files)


site 					site --> it will create the document for java source code
default					

 
	validate --> it will validate the directory structure it will check for the all the sources files

	compile --> it will compiles the java source code and any test cases 
	test -->  it will run the test cases 
	package --> it will generates the .jar .war and .ear pacakges
	install --> it will store the build artificats in maven local repo
	deploy

unit test cases
Java --> Junit
.Net --> Nunit
C --> Cunit
C ++ --> CUnit
python --> Pyunit
Javascript --> Jasmine


compile
###########



In Java, compile refers to the process of translating Java source code into bytecode that can be executed by the Java Virtual Machine (JVM). The javac command, which is included with the Java Development Kit (JDK), is used to compile Java source code into bytecode.

In Java, compile refers to the process of translating Java source code into bytecode that can be executed by the Java Virtual Machine (JVM). The javac command, which is included with the Java Development Kit (JDK), is used to compile Java source code into bytecode.

During the compilation process, the javac command checks the syntax and semantics of the source code to detect any errors. If there are no errors, the javac command generates one or more .class files that contain the bytecode for the classes defined in the source code.

The compiled bytecode is platform-independent, which means that it can be executed on any system that has a JVM installed. This is one of the main advantages of using Java for developing applications, as it allows developers to write code once and run it on multiple platforms.

In the context of Maven, the compile phase is one of the default phases of the Maven build lifecycle. During the compile phase, Maven compiles the Java source code in the project's src/main/java directory into bytecode and generates the necessary class files in the target/classes directory of the project.



################################


mvn clean 
#########

 
swager for documentation

##############################

IDE --> integrated development 
Eclipes --> 

##########

NPM node package manager

if one test case failed also package will not create

mvn clean package -DskipTests (it will skip the test units)
mvn clean package -Dmaven.test.skip=true

we can run specific module as well like below

mvn clean package -pl mavenEnterpriseApp,MavenEnterpriseApp-web,MavenEnterprise-app-web

mvn archetype:generate default command to create a sample project

we will be configure under distributionmanagement remote repo \\\\\




















##############################################################################################




Installation

$ sudo yum install java-1.8.0-openjdk-devel

$ sudo yum install java-11-openjdk-devel

cd /opt/
 wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.zip
unzip <packagename>


For specific user
#################

vi ~/.bash_profile

export M2_HOME=/opt/apache-maven-3.9.6
export PATH=$PATH:$M2_HOME/bin
source ~/.bash_profile

For all  users
###############

vi /etc/profile

export M2_HOME=/opt/apache-maven-3.8.6
export PATH=$PATH:$M2_HOME/bin


